services:
  webserver:
    image: nginx:1.27.3-alpine
    ports:
      - "8000:80"
    working_dir: /app
    volumes:
      - ./:/app
      - ./nginx.app.conf:/etc/nginx/conf.d/default.conf
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
      - reverb
    restart: always
    user: "1000:1000"

  app:
    build:
      context: .
      target: nonroot
    volumes:
      - ./:/app
    depends_on:
      db:
        condition: service_healthy # Wait for the db service to be healthy (using the healthcheck defined below)
        restart: true # Restart the service if db stops
    restart: always
 
  reverb:
    build:
      context: .
      target: reverb-nonroot
    volumes:
      - ./:/app
    depends_on:
      db:
        condition: service_healthy # Wait for the db service to be healthy (using the healthcheck defined below)
        restart: true # Restart the service if db stops
    restart: always

  workers:
    build:
      context: .
      target: workers-nonroot
    volumes:
      - ./:/app
    depends_on:
      reverb:
        condition: service_started
        restart: true # Restart the service if reverb stops
    restart: always

  db:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - .docker/data/db:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD # in docker compose to reference an environment variable, you need to use $$ instead of $
      interval: 10s       # Check every 10 seconds
      timeout: 5s         # Timeout for each check
      retries: 3          # Consider unhealthy after 3 consecutive failures
      start_period: 30s   # Wait 30 seconds before starting health checks
    restart: always
    user: "1000:1000"

  scheduler:
    build:
      context: .
      target: nonroot
    volumes:
      - ./:/app
    entrypoint: ["sh", "-c", "while true; do php artisan schedule:run; sleep 60; done"]
    depends_on:
      db:
        condition: service_healthy
        restart: true # Restart the service if db stops
    restart: always

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8001:80
    environment:
      - PMA_HOST=${DB_HOST} # from .env
      - PMA_PORT=${DB_PORT} # from .env
    depends_on:
      - db